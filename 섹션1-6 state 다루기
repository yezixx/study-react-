불변성: 어떤 값을 직접적으로 변경하지 않고, 새로운 값을 만들어 내는 것

React에서 특정 컴포넌트가 업데이트된 값을 반영하는 방법
1) Props 전달받음
2) 전달받은 값으로 shouldComponentUpdate 함수를 실행해서, false를 리턴하면 문제, true를 리턴하면 다음 단계로 넘어감
3) 가상DOM과 실제DOM을 비교하여 업데이트 된 해당 부분을 렌더링 해줌

(ex)
기존 데이터 {key: 1, name: “이름”}
Props로 전달 받은 데이터 {key: 1, name: “나이”}
불변성이 지켜지지 않은 채로 기존값이 변경된다면 리액트는 기존 객체와 전달 객체가 같다고 판단할 수 있어 바뀐 것을 감지하지 못함

<!--state-->
<!DOCTYPE html>
<html lang="en">
  <body>
    <script
      src="https://unpkg.com/react@18/umd/react.development.js"
      crossorigin
    ></script>
    <script
      src="https://unpkg.com/react-dom@18/umd/react-dom.development.js"
      crossorigin
    ></script>
    <script src="https://unpkg.com/@babel/standalone/babel.min.js"></script>
    <div id="root"></div>
    <script type="text/babel">
      const rootElement = document.getElementById("root");

      const state = { name: "button", color: "pink" };

      function Button({ name, color }) {
        // console.log("props:", props);
        return (
          <button style={{ backgroundColor: color }}>
            {color}
            {name}
          </button>
        );
      }

      const Buttons = () => (
        <>
          <button style={{ backgroundColor: state.color }}>
            {state.color + state.name}
          </button>
          <Button name={state.name} color={state.color} />
        </>
      );

      ReactDOM.render(Buttons(), rootElement);
    </script>
  </body>
</html>

<!--useState-->
<!DOCTYPE html>
<html lang="en">
  <body>
    <script
      src="https://unpkg.com/react@18/umd/react.development.js"
      crossorigin
    ></script>
    <script
      src="https://unpkg.com/react-dom@18/umd/react-dom.development.js"
      crossorigin
    ></script>
    <script src="https://unpkg.com/@babel/standalone/babel.min.js"></script>
    <div id="root"></div>
    <script type="text/babel">
      const rootElement = document.getElementById("root");

      const state = { name: "button", color: "pink" };

      function Button() {
        // console.log("props:", props);
        const [color, setColor] = React.useState("green");
        const [name, setName] = React.useState("button");
        return (
          <button style={{ backgroundColor: color }}>
            {color}
            {name}
          </button>
        );
      }

      const Buttons = () => (
        <>
          <button style={{ backgroundColor: state.color }}>
            {state.color + state.name}
          </button>
          <Button />
        </>
      );

      ReactDOM.render(Buttons(), rootElement);
    </script>
  </body>
</html>
